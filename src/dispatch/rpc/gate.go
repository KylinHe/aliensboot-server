// Code generated by aliensboot. DO NOT EDIT.
// source: module gate
package rpc

import (
	"github.com/KylinHe/aliensboot-server/protocol"
	"github.com/KylinHe/aliensboot-core/cluster/center"
)

var Gate = &gateRPCHandler{&rpcHandler{name:"gate"}}


type gateRPCHandler struct {
	*rpcHandler
}

func (this *gateRPCHandler) GetLbsNode(param string) string {
	service := center.ClusterCenter.AllocService(this.name, param)
	if service == nil {
		return ""
	}
	return service.GetID()
}


func (this *gateRPCHandler) HealthCheck(node string, request *protocol.HealthCheck) *protocol.HealthCheckRet {
	message := &protocol.Request{
		Gate:&protocol.Request_HealthCheck{
			HealthCheck:request,
		},
	}
	messageRet, _ := this.Request(node, message)
	return messageRet.GetHealthCheckRet()
}


func (this *gateRPCHandler) HealthCheckAuth(authId int64, hashKey string, request *protocol.HealthCheck) (*protocol.HealthCheckRet, error) {
	message := &protocol.Request{
		Gate:&protocol.Request_HealthCheck{
			HealthCheck:request,
		},
	}
	messageRet, err := this.AuthRequest(authId, hashKey, message)
	return messageRet.GetHealthCheckRet(), err
}


func (this *gateRPCHandler) HealthCheckAuthNode(authId int64, node string, request *protocol.HealthCheck) (*protocol.HealthCheckRet, error) {
	message := &protocol.Request{
		Gate:&protocol.Request_HealthCheck{
			HealthCheck:request,
		},
	}
	messageRet, err := this.AuthNodeRequest(authId, node, message)
	return messageRet.GetHealthCheckRet(), err
}

func (this *gateRPCHandler) BindService(node string, request *protocol.BindService) *protocol.BindServiceRet {
	message := &protocol.Request{
		Gate:&protocol.Request_BindService{
			BindService:request,
		},
	}
	messageRet, _ := this.Request(node, message)
	return messageRet.GetBindServiceRet()
}


func (this *gateRPCHandler) BindServiceAuth(authId int64, hashKey string, request *protocol.BindService) (*protocol.BindServiceRet, error) {
	message := &protocol.Request{
		Gate:&protocol.Request_BindService{
			BindService:request,
		},
	}
	messageRet, err := this.AuthRequest(authId, hashKey, message)
	return messageRet.GetBindServiceRet(), err
}


func (this *gateRPCHandler) BindServiceAuthNode(authId int64, node string, request *protocol.BindService) (*protocol.BindServiceRet, error) {
	message := &protocol.Request{
		Gate:&protocol.Request_BindService{
			BindService:request,
		},
	}
	messageRet, err := this.AuthNodeRequest(authId, node, message)
	return messageRet.GetBindServiceRet(), err
}

func (this *gateRPCHandler) GetAuthNode(node string, request *protocol.GetAuthNode) *protocol.GetAuthNodeRet {
	message := &protocol.Request{
		Gate:&protocol.Request_GetAuthNode{
			GetAuthNode:request,
		},
	}
	messageRet, _ := this.Request(node, message)
	return messageRet.GetGetAuthNodeRet()
}


func (this *gateRPCHandler) GetAuthNodeAuth(authId int64, hashKey string, request *protocol.GetAuthNode) (*protocol.GetAuthNodeRet, error) {
	message := &protocol.Request{
		Gate:&protocol.Request_GetAuthNode{
			GetAuthNode:request,
		},
	}
	messageRet, err := this.AuthRequest(authId, hashKey, message)
	return messageRet.GetGetAuthNodeRet(), err
}


func (this *gateRPCHandler) GetAuthNodeAuthNode(authId int64, node string, request *protocol.GetAuthNode) (*protocol.GetAuthNodeRet, error) {
	message := &protocol.Request{
		Gate:&protocol.Request_GetAuthNode{
			GetAuthNode:request,
		},
	}
	messageRet, err := this.AuthNodeRequest(authId, node, message)
	return messageRet.GetGetAuthNodeRet(), err
}




func (this *gateRPCHandler) KickOut(node string, request *protocol.KickOut) error {
	message := &protocol.Request{
		Gate:&protocol.Request_KickOut{
			KickOut:request,
		},
	}
	return this.Send(node, message)
}

func (this *gateRPCHandler) PushMessage(node string, request *protocol.PushMessage) error {
	message := &protocol.Request{
		Gate:&protocol.Request_PushMessage{
			PushMessage:request,
		},
	}
	return this.Send(node, message)
}
