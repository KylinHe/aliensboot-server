// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: defaultmodule_interface.proto

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	defaultmodule_interface.proto
	gate_interface.proto
	gate_model.proto
	oplog_model.proto
	passport_interface.proto
	passport_model.proto
	protocol.proto
	resultcode.proto

It has these top-level messages:
	Benchmark
	BenchmarkRet
	KickOut
	PushMessage
	BindService
	BindServiceRet
	BindServiceMultiAuth
	BindServiceMultiAuthRet
	GetFreeService
	GetFreeServiceRet
	HealthCheck
	HealthCheckRet
	GetAuthNode
	GetAuthNodeRet
	LogRegister
	LogLogin
	LogLogout
	LogDiamond
	LogCharge
	LogDayActiveUser
	LogDayVisit
	LogDayRegister
	LogDayRegisterTotal
	LogDayAvgVisit
	LogDayAvgTime
	LogDayRegisterRetention1
	LogDayRegisterRetention3
	LogDayRegisterRetention7
	LogDayActiveRetention1
	LogDayActiveRetention3
	LogDayActiveRetention7
	UserReset
	UserResetRet
	UserRegister
	UserRegisterRet
	UserLogin
	UserLoginRet
	ChannelLogin
	ChannelLoginRet
	TokenLogin
	TokenLoginRet
	ModifyUserStatus
	ModifyUserStatusRet
	GetUser
	GetUserRet
	User
	Request
	Response
	CodeMessage
*/
package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Benchmark struct {
	RequestContent string `protobuf:"bytes,1,opt,name=requestContent,proto3" json:"requestContent,omitempty"`
}

func (m *Benchmark) Reset()                    { *m = Benchmark{} }
func (m *Benchmark) String() string            { return proto.CompactTextString(m) }
func (*Benchmark) ProtoMessage()               {}
func (*Benchmark) Descriptor() ([]byte, []int) { return fileDescriptorDefaultmoduleInterface, []int{0} }

func (m *Benchmark) GetRequestContent() string {
	if m != nil {
		return m.RequestContent
	}
	return ""
}

type BenchmarkRet struct {
	RespContent string `protobuf:"bytes,2,opt,name=respContent,proto3" json:"respContent,omitempty"`
}

func (m *BenchmarkRet) Reset()         { *m = BenchmarkRet{} }
func (m *BenchmarkRet) String() string { return proto.CompactTextString(m) }
func (*BenchmarkRet) ProtoMessage()    {}
func (*BenchmarkRet) Descriptor() ([]byte, []int) {
	return fileDescriptorDefaultmoduleInterface, []int{1}
}

func (m *BenchmarkRet) GetRespContent() string {
	if m != nil {
		return m.RespContent
	}
	return ""
}

func init() {
	proto.RegisterType((*Benchmark)(nil), "protocol.benchmark")
	proto.RegisterType((*BenchmarkRet)(nil), "protocol.benchmarkRet")
}
func (m *Benchmark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Benchmark) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestContent) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDefaultmoduleInterface(dAtA, i, uint64(len(m.RequestContent)))
		i += copy(dAtA[i:], m.RequestContent)
	}
	return i, nil
}

func (m *BenchmarkRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BenchmarkRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RespContent) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDefaultmoduleInterface(dAtA, i, uint64(len(m.RespContent)))
		i += copy(dAtA[i:], m.RespContent)
	}
	return i, nil
}

func encodeVarintDefaultmoduleInterface(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Benchmark) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequestContent)
	if l > 0 {
		n += 1 + l + sovDefaultmoduleInterface(uint64(l))
	}
	return n
}

func (m *BenchmarkRet) Size() (n int) {
	var l int
	_ = l
	l = len(m.RespContent)
	if l > 0 {
		n += 1 + l + sovDefaultmoduleInterface(uint64(l))
	}
	return n
}

func sovDefaultmoduleInterface(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDefaultmoduleInterface(x uint64) (n int) {
	return sovDefaultmoduleInterface(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Benchmark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefaultmoduleInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: benchmark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: benchmark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefaultmoduleInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefaultmoduleInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefaultmoduleInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDefaultmoduleInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BenchmarkRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefaultmoduleInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: benchmarkRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: benchmarkRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefaultmoduleInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefaultmoduleInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefaultmoduleInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDefaultmoduleInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDefaultmoduleInterface(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDefaultmoduleInterface
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDefaultmoduleInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDefaultmoduleInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDefaultmoduleInterface
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDefaultmoduleInterface
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDefaultmoduleInterface(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDefaultmoduleInterface = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDefaultmoduleInterface   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("defaultmodule_interface.proto", fileDescriptorDefaultmoduleInterface) }

var fileDescriptorDefaultmoduleInterface = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4d, 0x49, 0x4d, 0x4b,
	0x2c, 0xcd, 0x29, 0xc9, 0xcd, 0x4f, 0x29, 0xcd, 0x49, 0x8d, 0xcf, 0xcc, 0x2b, 0x49, 0x2d, 0x4a,
	0x4b, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0xc9, 0xf9, 0x39,
	0x4a, 0xc6, 0x5c, 0x9c, 0x49, 0xa9, 0x79, 0xc9, 0x19, 0xb9, 0x89, 0x45, 0xd9, 0x42, 0x6a, 0x5c,
	0x7c, 0x45, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0xce, 0xf9, 0x79, 0x25, 0xa9, 0x79, 0x25, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x68, 0xa2, 0x4a, 0x06, 0x5c, 0x3c, 0x70, 0x4d, 0x41, 0xa9,
	0x25, 0x42, 0x0a, 0x5c, 0xdc, 0x45, 0xa9, 0xc5, 0x05, 0x30, 0x4d, 0x4c, 0x60, 0x4d, 0xc8, 0x42,
	0x4e, 0x3c, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0x63, 0x12,
	0x1b, 0xd8, 0x7a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xbe, 0xc9, 0x52, 0xa6, 0x00,
	0x00, 0x00,
}
