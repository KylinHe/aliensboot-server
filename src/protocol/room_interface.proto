syntax = "proto3";
package protocol;

import "room_model.proto";

//------------------------请求响应-----------------

//显示玩家信息，qqgameid为玩家的账号，gameCreated时取得。
message showUser {
    int64 playerid = 1;
}

message showUserRet {
    Player player = 1;
}

//创建房间
message roomCreate {
    string appID = 1; //游戏id
    string roomID = 2; //指定房间id ""不指定
    bool  force = 3; //是否强制创建 会清理之前的房间
    int32 maxSeat = 4; //<=0 默认4个
    repeated int64 playerID = 5; //匹配成功的玩家id
}

//创建房间成功
message roomCreateRet {
    Room room = 1;
}

message roomClose {
    string roomID = 1;
}


//加入房间
message joinRoom {
    string appID = 1;
    string roomID = 2;
}

//加入房间信息
message joinRoomRet {
    Room room = 1;
}

//请求加入游戏 观众
message requestJoinSeat {
    JoinRequest request = 1;
}

message joinSeat {
    JoinRequest request = 1;
}

//主播 修改玩家状态
message changePlayerState {
    int32 role = 1; //改变玩家权限
    int64 playerID = 2; //
}

message changePlayerStateRet {
    string roomID = 1; //
    Player player = 2; //
}

//更新座位信息
message updateSeat {
    string roomID = 1; //
    int32 seatID = 2; //座位号
    int32 opt = 3; //0开放座位, 1锁定座位 2离开座位 3加入座位(直接换座位)
}


message getRoomInfo {
    string appID = 1;
    string roomID = 2; //快速加入房间
}

message getRoomInfoRet {
    Room room = 1;
}


message gameReady {
}

//直接开始游戏
message gameStart {
}

//游戏结束上报游戏结果
message gameOver {
    string data = 1; //游戏上报数据
}

message closeRoom {

}

//发送游戏数据, data参数结构由游戏自拟，接收方收到的data与发送方发送的结构和内容一致。
//1v1游戏中，玩家A调用invoke gameData发送消息，玩家B使用onMessage gameData接收消息。
//但在2v2游戏中，有A、B、C、D四个玩家，A调用invoke gameData发送消息时，玩家B、C、D都可以收到，
//但是B、C、D并不知道消息的发送方为哪位玩家，所以在2v2游戏中调用invoke gameData发送消息时，需显示声明发送者的身份。
message gameData {
    string data = 1; //游戏数据 玩家自定义json字符串
    int32 roles = 2; //发送的角色
}



//-----------------------------推送房间消息------------------------------------

message gameOverRet {
    string roomID = 1;
    bool result = 2; //
}

message roomClosePush {
    string roomID = 1;
}

//收到所有玩家gameReady，通知所有玩家游戏开始。
message gameStartPush {
    string roomID = 1;
}

//上报游戏数据成功 通知所有玩家游戏结束
message gameStopPush {
    string roomID = 1;
}

//请求加入游戏 观众
message requestJoinSeatPush {
    string roomID = 1;
    JoinRequest request = 2;
}


//接收其他玩家发送的data，接收到的数据与发送的数据结构和内容一致。
//比如，玩家A通过invoke gameData发送数据{x:1, y: 2}，玩家B通过onMessage gameData收到的数据也为{x:1, y: 2}。
message gameDataPush {
    string roomID = 1;
    string data = 2;
}

//座位更新信息推送
message updateSeatPush {
    string roomID = 1;
    repeated Seat seats = 2; //变更的座位信息
}