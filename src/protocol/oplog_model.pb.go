// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oplog_model.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Operation int32

const (
	Operation_none Operation = 0
)

var Operation_name = map[int32]string{
	0: "none",
}
var Operation_value = map[string]int32{
	"none": 0,
}

func (x Operation) String() string {
	return proto.EnumName(Operation_name, int32(x))
}
func (Operation) EnumDescriptor() ([]byte, []int) { return fileDescriptorOplogModel, []int{0} }

// 注册
type LogRegister struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	RoleId   int64  `protobuf:"varint,2,opt,name=roleId,proto3" json:"roleId,omitempty"`
	Time     int64  `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Platform string `protobuf:"bytes,8,opt,name=platform,proto3" json:"platform,omitempty"`
	Channel  string `protobuf:"bytes,7,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *LogRegister) Reset()                    { *m = LogRegister{} }
func (m *LogRegister) String() string            { return proto.CompactTextString(m) }
func (*LogRegister) ProtoMessage()               {}
func (*LogRegister) Descriptor() ([]byte, []int) { return fileDescriptorOplogModel, []int{0} }

func (m *LogRegister) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LogRegister) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *LogRegister) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *LogRegister) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *LogRegister) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

// 登录日志
type LogLogin struct {
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	RoleId int64  `protobuf:"varint,2,opt,name=roleId,proto3" json:"roleId,omitempty"`
	Time   int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Ip     string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *LogLogin) Reset()                    { *m = LogLogin{} }
func (m *LogLogin) String() string            { return proto.CompactTextString(m) }
func (*LogLogin) ProtoMessage()               {}
func (*LogLogin) Descriptor() ([]byte, []int) { return fileDescriptorOplogModel, []int{1} }

func (m *LogLogin) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LogLogin) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *LogLogin) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *LogLogin) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// 登出日志
type LogLogout struct {
	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	RoleId     int64  `protobuf:"varint,2,opt,name=roleId,proto3" json:"roleId,omitempty"`
	Time       int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	ActiveTime int32  `protobuf:"varint,4,opt,name=activeTime,proto3" json:"activeTime,omitempty"`
	LogoutType int32  `protobuf:"varint,5,opt,name=logoutType,proto3" json:"logoutType,omitempty"`
}

func (m *LogLogout) Reset()                    { *m = LogLogout{} }
func (m *LogLogout) String() string            { return proto.CompactTextString(m) }
func (*LogLogout) ProtoMessage()               {}
func (*LogLogout) Descriptor() ([]byte, []int) { return fileDescriptorOplogModel, []int{2} }

func (m *LogLogout) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LogLogout) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *LogLogout) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *LogLogout) GetActiveTime() int32 {
	if m != nil {
		return m.ActiveTime
	}
	return 0
}

func (m *LogLogout) GetLogoutType() int32 {
	if m != nil {
		return m.LogoutType
	}
	return 0
}

// 钻石日志
type LogDiamond struct {
	Id        string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	RoleId    int64     `protobuf:"varint,2,opt,name=roleId,proto3" json:"roleId,omitempty"`
	Time      int64     `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Operation Operation `protobuf:"varint,4,opt,name=operation,proto3,enum=protocol.Operation" json:"operation,omitempty"`
	Change    int32     `protobuf:"varint,5,opt,name=change,proto3" json:"change,omitempty"`
	Current   int32     `protobuf:"varint,6,opt,name=current,proto3" json:"current,omitempty"`
}

func (m *LogDiamond) Reset()                    { *m = LogDiamond{} }
func (m *LogDiamond) String() string            { return proto.CompactTextString(m) }
func (*LogDiamond) ProtoMessage()               {}
func (*LogDiamond) Descriptor() ([]byte, []int) { return fileDescriptorOplogModel, []int{3} }

func (m *LogDiamond) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LogDiamond) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *LogDiamond) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *LogDiamond) GetOperation() Operation {
	if m != nil {
		return m.Operation
	}
	return Operation_none
}

func (m *LogDiamond) GetChange() int32 {
	if m != nil {
		return m.Change
	}
	return 0
}

func (m *LogDiamond) GetCurrent() int32 {
	if m != nil {
		return m.Current
	}
	return 0
}

// 充值日志
type LogCharge struct {
	Id           string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	RoleId       int64   `protobuf:"varint,2,opt,name=roleId,proto3" json:"roleId,omitempty"`
	Time         int64   `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Value        float32 `protobuf:"fixed32,5,opt,name=value,proto3" json:"value,omitempty"`
	CurrencyType int32   `protobuf:"varint,6,opt,name=currencyType,proto3" json:"currencyType,omitempty"`
	Order        string  `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	ShopID       int32   `protobuf:"varint,8,opt,name=shopID,proto3" json:"shopID,omitempty"`
}

func (m *LogCharge) Reset()                    { *m = LogCharge{} }
func (m *LogCharge) String() string            { return proto.CompactTextString(m) }
func (*LogCharge) ProtoMessage()               {}
func (*LogCharge) Descriptor() ([]byte, []int) { return fileDescriptorOplogModel, []int{4} }

func (m *LogCharge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LogCharge) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *LogCharge) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *LogCharge) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *LogCharge) GetCurrencyType() int32 {
	if m != nil {
		return m.CurrencyType
	}
	return 0
}

func (m *LogCharge) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *LogCharge) GetShopID() int32 {
	if m != nil {
		return m.ShopID
	}
	return 0
}

type LogDayActiveUser struct {
	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LogDayActiveUser) Reset()                    { *m = LogDayActiveUser{} }
func (m *LogDayActiveUser) String() string            { return proto.CompactTextString(m) }
func (*LogDayActiveUser) ProtoMessage()               {}
func (*LogDayActiveUser) Descriptor() ([]byte, []int) { return fileDescriptorOplogModel, []int{5} }

func (m *LogDayActiveUser) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogDayActiveUser) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type LogDayVisit struct {
	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LogDayVisit) Reset()                    { *m = LogDayVisit{} }
func (m *LogDayVisit) String() string            { return proto.CompactTextString(m) }
func (*LogDayVisit) ProtoMessage()               {}
func (*LogDayVisit) Descriptor() ([]byte, []int) { return fileDescriptorOplogModel, []int{6} }

func (m *LogDayVisit) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogDayVisit) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type LogDayRegister struct {
	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LogDayRegister) Reset()                    { *m = LogDayRegister{} }
func (m *LogDayRegister) String() string            { return proto.CompactTextString(m) }
func (*LogDayRegister) ProtoMessage()               {}
func (*LogDayRegister) Descriptor() ([]byte, []int) { return fileDescriptorOplogModel, []int{7} }

func (m *LogDayRegister) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogDayRegister) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type LogDayRegisterTotal struct {
	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LogDayRegisterTotal) Reset()                    { *m = LogDayRegisterTotal{} }
func (m *LogDayRegisterTotal) String() string            { return proto.CompactTextString(m) }
func (*LogDayRegisterTotal) ProtoMessage()               {}
func (*LogDayRegisterTotal) Descriptor() ([]byte, []int) { return fileDescriptorOplogModel, []int{8} }

func (m *LogDayRegisterTotal) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogDayRegisterTotal) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type LogDayAvgVisit struct {
	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LogDayAvgVisit) Reset()                    { *m = LogDayAvgVisit{} }
func (m *LogDayAvgVisit) String() string            { return proto.CompactTextString(m) }
func (*LogDayAvgVisit) ProtoMessage()               {}
func (*LogDayAvgVisit) Descriptor() ([]byte, []int) { return fileDescriptorOplogModel, []int{9} }

func (m *LogDayAvgVisit) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogDayAvgVisit) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type LogDayAvgTime struct {
	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LogDayAvgTime) Reset()                    { *m = LogDayAvgTime{} }
func (m *LogDayAvgTime) String() string            { return proto.CompactTextString(m) }
func (*LogDayAvgTime) ProtoMessage()               {}
func (*LogDayAvgTime) Descriptor() ([]byte, []int) { return fileDescriptorOplogModel, []int{10} }

func (m *LogDayAvgTime) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogDayAvgTime) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 次日注册留存率
type LogDayRegisterRetention1 struct {
	Id    int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LogDayRegisterRetention1) Reset()         { *m = LogDayRegisterRetention1{} }
func (m *LogDayRegisterRetention1) String() string { return proto.CompactTextString(m) }
func (*LogDayRegisterRetention1) ProtoMessage()    {}
func (*LogDayRegisterRetention1) Descriptor() ([]byte, []int) {
	return fileDescriptorOplogModel, []int{11}
}

func (m *LogDayRegisterRetention1) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogDayRegisterRetention1) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 3日注册留存率
type LogDayRegisterRetention3 struct {
	Id    int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LogDayRegisterRetention3) Reset()         { *m = LogDayRegisterRetention3{} }
func (m *LogDayRegisterRetention3) String() string { return proto.CompactTextString(m) }
func (*LogDayRegisterRetention3) ProtoMessage()    {}
func (*LogDayRegisterRetention3) Descriptor() ([]byte, []int) {
	return fileDescriptorOplogModel, []int{12}
}

func (m *LogDayRegisterRetention3) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogDayRegisterRetention3) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 7日注册留存率
type LogDayRegisterRetention7 struct {
	Id    int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LogDayRegisterRetention7) Reset()         { *m = LogDayRegisterRetention7{} }
func (m *LogDayRegisterRetention7) String() string { return proto.CompactTextString(m) }
func (*LogDayRegisterRetention7) ProtoMessage()    {}
func (*LogDayRegisterRetention7) Descriptor() ([]byte, []int) {
	return fileDescriptorOplogModel, []int{13}
}

func (m *LogDayRegisterRetention7) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogDayRegisterRetention7) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 次日活跃留存率
type LogDayActiveRetention1 struct {
	Id    int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LogDayActiveRetention1) Reset()         { *m = LogDayActiveRetention1{} }
func (m *LogDayActiveRetention1) String() string { return proto.CompactTextString(m) }
func (*LogDayActiveRetention1) ProtoMessage()    {}
func (*LogDayActiveRetention1) Descriptor() ([]byte, []int) {
	return fileDescriptorOplogModel, []int{14}
}

func (m *LogDayActiveRetention1) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogDayActiveRetention1) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 3日活跃留存率
type LogDayActiveRetention3 struct {
	Id    int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LogDayActiveRetention3) Reset()         { *m = LogDayActiveRetention3{} }
func (m *LogDayActiveRetention3) String() string { return proto.CompactTextString(m) }
func (*LogDayActiveRetention3) ProtoMessage()    {}
func (*LogDayActiveRetention3) Descriptor() ([]byte, []int) {
	return fileDescriptorOplogModel, []int{15}
}

func (m *LogDayActiveRetention3) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogDayActiveRetention3) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 7日活跃留存率
type LogDayActiveRetention7 struct {
	Id    int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LogDayActiveRetention7) Reset()         { *m = LogDayActiveRetention7{} }
func (m *LogDayActiveRetention7) String() string { return proto.CompactTextString(m) }
func (*LogDayActiveRetention7) ProtoMessage()    {}
func (*LogDayActiveRetention7) Descriptor() ([]byte, []int) {
	return fileDescriptorOplogModel, []int{16}
}

func (m *LogDayActiveRetention7) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogDayActiveRetention7) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*LogRegister)(nil), "protocol.logRegister")
	proto.RegisterType((*LogLogin)(nil), "protocol.logLogin")
	proto.RegisterType((*LogLogout)(nil), "protocol.logLogout")
	proto.RegisterType((*LogDiamond)(nil), "protocol.logDiamond")
	proto.RegisterType((*LogCharge)(nil), "protocol.logCharge")
	proto.RegisterType((*LogDayActiveUser)(nil), "protocol.logDayActiveUser")
	proto.RegisterType((*LogDayVisit)(nil), "protocol.logDayVisit")
	proto.RegisterType((*LogDayRegister)(nil), "protocol.logDayRegister")
	proto.RegisterType((*LogDayRegisterTotal)(nil), "protocol.logDayRegisterTotal")
	proto.RegisterType((*LogDayAvgVisit)(nil), "protocol.logDayAvgVisit")
	proto.RegisterType((*LogDayAvgTime)(nil), "protocol.logDayAvgTime")
	proto.RegisterType((*LogDayRegisterRetention1)(nil), "protocol.logDayRegisterRetention1")
	proto.RegisterType((*LogDayRegisterRetention3)(nil), "protocol.logDayRegisterRetention3")
	proto.RegisterType((*LogDayRegisterRetention7)(nil), "protocol.logDayRegisterRetention7")
	proto.RegisterType((*LogDayActiveRetention1)(nil), "protocol.logDayActiveRetention1")
	proto.RegisterType((*LogDayActiveRetention3)(nil), "protocol.logDayActiveRetention3")
	proto.RegisterType((*LogDayActiveRetention7)(nil), "protocol.logDayActiveRetention7")
	proto.RegisterEnum("protocol.Operation", Operation_name, Operation_value)
}
func (m *LogRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRegister) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.RoleId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.RoleId))
	}
	if m.Time != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Time))
	}
	if len(m.Channel) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	return i, nil
}

func (m *LogLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.RoleId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.RoleId))
	}
	if m.Time != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Time))
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	return i, nil
}

func (m *LogLogout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogLogout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.RoleId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.RoleId))
	}
	if m.Time != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Time))
	}
	if m.ActiveTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.ActiveTime))
	}
	if m.LogoutType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.LogoutType))
	}
	return i, nil
}

func (m *LogDiamond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogDiamond) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.RoleId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.RoleId))
	}
	if m.Time != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Time))
	}
	if m.Operation != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Operation))
	}
	if m.Change != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Change))
	}
	if m.Current != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Current))
	}
	return i, nil
}

func (m *LogCharge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogCharge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.RoleId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.RoleId))
	}
	if m.Time != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Time))
	}
	if m.Value != 0 {
		dAtA[i] = 0x2d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i += 4
	}
	if m.CurrencyType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.CurrencyType))
	}
	if len(m.Order) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(len(m.Order)))
		i += copy(dAtA[i:], m.Order)
	}
	if m.ShopID != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.ShopID))
	}
	return i, nil
}

func (m *LogDayActiveUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogDayActiveUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Id))
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *LogDayVisit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogDayVisit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Id))
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *LogDayRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogDayRegister) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Id))
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *LogDayRegisterTotal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogDayRegisterTotal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Id))
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *LogDayAvgVisit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogDayAvgVisit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Id))
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *LogDayAvgTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogDayAvgTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Id))
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *LogDayRegisterRetention1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogDayRegisterRetention1) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Id))
	}
	if m.Value != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i += 4
	}
	return i, nil
}

func (m *LogDayRegisterRetention3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogDayRegisterRetention3) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Id))
	}
	if m.Value != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i += 4
	}
	return i, nil
}

func (m *LogDayRegisterRetention7) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogDayRegisterRetention7) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Id))
	}
	if m.Value != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i += 4
	}
	return i, nil
}

func (m *LogDayActiveRetention1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogDayActiveRetention1) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Id))
	}
	if m.Value != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i += 4
	}
	return i, nil
}

func (m *LogDayActiveRetention3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogDayActiveRetention3) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Id))
	}
	if m.Value != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i += 4
	}
	return i, nil
}

func (m *LogDayActiveRetention7) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogDayActiveRetention7) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOplogModel(dAtA, i, uint64(m.Id))
	}
	if m.Value != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i += 4
	}
	return i, nil
}

func encodeVarintOplogModel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LogRegister) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOplogModel(uint64(l))
	}
	if m.RoleId != 0 {
		n += 1 + sovOplogModel(uint64(m.RoleId))
	}
	if m.Time != 0 {
		n += 1 + sovOplogModel(uint64(m.Time))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovOplogModel(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovOplogModel(uint64(l))
	}
	return n
}

func (m *LogLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOplogModel(uint64(l))
	}
	if m.RoleId != 0 {
		n += 1 + sovOplogModel(uint64(m.RoleId))
	}
	if m.Time != 0 {
		n += 1 + sovOplogModel(uint64(m.Time))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovOplogModel(uint64(l))
	}
	return n
}

func (m *LogLogout) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOplogModel(uint64(l))
	}
	if m.RoleId != 0 {
		n += 1 + sovOplogModel(uint64(m.RoleId))
	}
	if m.Time != 0 {
		n += 1 + sovOplogModel(uint64(m.Time))
	}
	if m.ActiveTime != 0 {
		n += 1 + sovOplogModel(uint64(m.ActiveTime))
	}
	if m.LogoutType != 0 {
		n += 1 + sovOplogModel(uint64(m.LogoutType))
	}
	return n
}

func (m *LogDiamond) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOplogModel(uint64(l))
	}
	if m.RoleId != 0 {
		n += 1 + sovOplogModel(uint64(m.RoleId))
	}
	if m.Time != 0 {
		n += 1 + sovOplogModel(uint64(m.Time))
	}
	if m.Operation != 0 {
		n += 1 + sovOplogModel(uint64(m.Operation))
	}
	if m.Change != 0 {
		n += 1 + sovOplogModel(uint64(m.Change))
	}
	if m.Current != 0 {
		n += 1 + sovOplogModel(uint64(m.Current))
	}
	return n
}

func (m *LogCharge) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOplogModel(uint64(l))
	}
	if m.RoleId != 0 {
		n += 1 + sovOplogModel(uint64(m.RoleId))
	}
	if m.Time != 0 {
		n += 1 + sovOplogModel(uint64(m.Time))
	}
	if m.Value != 0 {
		n += 5
	}
	if m.CurrencyType != 0 {
		n += 1 + sovOplogModel(uint64(m.CurrencyType))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovOplogModel(uint64(l))
	}
	if m.ShopID != 0 {
		n += 1 + sovOplogModel(uint64(m.ShopID))
	}
	return n
}

func (m *LogDayActiveUser) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOplogModel(uint64(m.Id))
	}
	if m.Value != 0 {
		n += 1 + sovOplogModel(uint64(m.Value))
	}
	return n
}

func (m *LogDayVisit) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOplogModel(uint64(m.Id))
	}
	if m.Value != 0 {
		n += 1 + sovOplogModel(uint64(m.Value))
	}
	return n
}

func (m *LogDayRegister) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOplogModel(uint64(m.Id))
	}
	if m.Value != 0 {
		n += 1 + sovOplogModel(uint64(m.Value))
	}
	return n
}

func (m *LogDayRegisterTotal) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOplogModel(uint64(m.Id))
	}
	if m.Value != 0 {
		n += 1 + sovOplogModel(uint64(m.Value))
	}
	return n
}

func (m *LogDayAvgVisit) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOplogModel(uint64(m.Id))
	}
	if m.Value != 0 {
		n += 1 + sovOplogModel(uint64(m.Value))
	}
	return n
}

func (m *LogDayAvgTime) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOplogModel(uint64(m.Id))
	}
	if m.Value != 0 {
		n += 1 + sovOplogModel(uint64(m.Value))
	}
	return n
}

func (m *LogDayRegisterRetention1) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOplogModel(uint64(m.Id))
	}
	if m.Value != 0 {
		n += 5
	}
	return n
}

func (m *LogDayRegisterRetention3) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOplogModel(uint64(m.Id))
	}
	if m.Value != 0 {
		n += 5
	}
	return n
}

func (m *LogDayRegisterRetention7) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOplogModel(uint64(m.Id))
	}
	if m.Value != 0 {
		n += 5
	}
	return n
}

func (m *LogDayActiveRetention1) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOplogModel(uint64(m.Id))
	}
	if m.Value != 0 {
		n += 5
	}
	return n
}

func (m *LogDayActiveRetention3) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOplogModel(uint64(m.Id))
	}
	if m.Value != 0 {
		n += 5
	}
	return n
}

func (m *LogDayActiveRetention7) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOplogModel(uint64(m.Id))
	}
	if m.Value != 0 {
		n += 5
	}
	return n
}

func sovOplogModel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOplogModel(x uint64) (n int) {
	return sovOplogModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOplogModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOplogModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOplogModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOplogModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOplogModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogLogout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logLogout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logLogout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOplogModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveTime", wireType)
			}
			m.ActiveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoutType", wireType)
			}
			m.LogoutType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogoutType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogDiamond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logDiamond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logDiamond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOplogModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= (Operation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			m.Change = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Change |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			m.Current = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Current |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogCharge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logCharge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logCharge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOplogModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyType", wireType)
			}
			m.CurrencyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrencyType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOplogModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopID", wireType)
			}
			m.ShopID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogDayActiveUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logDayActiveUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logDayActiveUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogDayVisit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logDayVisit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logDayVisit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogDayRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logDayRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logDayRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogDayRegisterTotal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logDayRegisterTotal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logDayRegisterTotal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogDayAvgVisit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logDayAvgVisit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logDayAvgVisit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogDayAvgTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logDayAvgTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logDayAvgTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogDayRegisterRetention1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logDayRegisterRetention1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logDayRegisterRetention1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogDayRegisterRetention3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logDayRegisterRetention3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logDayRegisterRetention3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogDayRegisterRetention7) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logDayRegisterRetention7: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logDayRegisterRetention7: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogDayActiveRetention1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logDayActiveRetention1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logDayActiveRetention1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogDayActiveRetention3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logDayActiveRetention3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logDayActiveRetention3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogDayActiveRetention7) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: logDayActiveRetention7: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: logDayActiveRetention7: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOplogModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOplogModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOplogModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOplogModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOplogModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOplogModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOplogModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOplogModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOplogModel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("oplog_model.proto", fileDescriptorOplogModel) }

var fileDescriptorOplogModel = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x86, 0xd9, 0x6d, 0x92, 0x26, 0x43, 0x89, 0xca, 0x16, 0xaa, 0x55, 0x0f, 0xa1, 0xda, 0x53,
	0x85, 0x44, 0xaa, 0x92, 0x03, 0x12, 0xb7, 0xb6, 0x01, 0x51, 0x81, 0x00, 0x59, 0x81, 0x6b, 0xe5,
	0x64, 0x1d, 0xc7, 0x92, 0xe3, 0x59, 0x39, 0x4e, 0xa4, 0x3c, 0x05, 0x47, 0x9e, 0x06, 0x71, 0xe5,
	0xc8, 0x13, 0x20, 0x94, 0x47, 0xe0, 0x09, 0xd0, 0x8e, 0xb3, 0x69, 0x22, 0x15, 0xa1, 0x26, 0x39,
	0xed, 0xfe, 0x9e, 0xdd, 0x6f, 0xfe, 0xb1, 0x67, 0x0c, 0x0f, 0x31, 0xd3, 0x28, 0xaf, 0x87, 0x98,
	0x0a, 0xdd, 0xcc, 0x2c, 0x3a, 0x8c, 0xaa, 0xf4, 0xe8, 0xa1, 0x3e, 0x7a, 0x26, 0x95, 0x1b, 0x8c,
	0xbb, 0xcd, 0x1e, 0x0e, 0x4f, 0x25, 0x4a, 0x3c, 0xa5, 0x48, 0x77, 0xdc, 0x27, 0x45, 0x82, 0xde,
	0xfc, 0x8f, 0xc9, 0x97, 0x00, 0xee, 0x6b, 0x94, 0x4c, 0x48, 0x35, 0x72, 0xc2, 0x46, 0x0d, 0x08,
	0x55, 0x1a, 0x07, 0xc7, 0xc1, 0x49, 0xed, 0xa2, 0xfe, 0xe7, 0xd7, 0x13, 0xe8, 0x8e, 0xd0, 0xbc,
	0x4c, 0xae, 0x55, 0x9a, 0xb0, 0x50, 0xa5, 0xd1, 0x21, 0x54, 0x2c, 0x6a, 0x71, 0x95, 0xc6, 0xe1,
	0x71, 0x70, 0xb2, 0xc3, 0xe6, 0x2a, 0x8a, 0xa0, 0xe4, 0xd4, 0x50, 0xc4, 0x25, 0x5a, 0xa5, 0xf7,
	0x28, 0x86, 0xdd, 0xde, 0x80, 0x1b, 0x23, 0x74, 0xbc, 0x9b, 0x03, 0x59, 0x21, 0xa3, 0x23, 0xa8,
	0x66, 0x9a, 0xbb, 0x3e, 0xda, 0x61, 0x5c, 0xa5, 0xd0, 0x42, 0x27, 0x7d, 0xa8, 0x6a, 0x94, 0xef,
	0x50, 0x2a, 0xb3, 0xb1, 0x9b, 0x9d, 0x25, 0x37, 0x75, 0x08, 0x55, 0x46, 0xfe, 0x6a, 0x2c, 0x54,
	0x59, 0xf2, 0x35, 0x80, 0x9a, 0x4f, 0x84, 0x63, 0xb7, 0xd5, 0x4c, 0x0d, 0x00, 0xde, 0x73, 0x6a,
	0x22, 0x3a, 0xc5, 0x8e, 0x94, 0xd9, 0xd2, 0x4a, 0x1e, 0xd7, 0x94, 0xb5, 0x33, 0xcd, 0x44, 0x5c,
	0xf6, 0xf1, 0x9b, 0x95, 0xe4, 0x5b, 0x40, 0x1f, 0xb4, 0x15, 0x1f, 0xa2, 0x49, 0xb7, 0x6a, 0xed,
	0x0c, 0x6a, 0x98, 0x09, 0xcb, 0x9d, 0x42, 0x43, 0xce, 0xea, 0xcf, 0x0f, 0x9a, 0x45, 0xef, 0x34,
	0x3f, 0x14, 0x21, 0x76, 0xf3, 0x55, 0x8e, 0xcf, 0x8f, 0x4d, 0x16, 0x4e, 0xe7, 0x8a, 0x4e, 0x77,
	0x6c, 0xad, 0x30, 0x2e, 0xae, 0x50, 0xa0, 0x90, 0xc9, 0x77, 0xbf, 0xb3, 0x97, 0x03, 0x6e, 0xa5,
	0xd8, 0xaa, 0xfd, 0x47, 0x50, 0x9e, 0x70, 0x3d, 0xf6, 0x56, 0x42, 0xe6, 0x45, 0x94, 0xc0, 0x9e,
	0x4f, 0xdd, 0x9b, 0xd2, 0x8e, 0x7a, 0x3b, 0x2b, 0x6b, 0xf9, 0x9f, 0x68, 0x53, 0x61, 0xe7, 0x9d,
	0xe8, 0x45, 0x9e, 0x7b, 0x34, 0xc0, 0xec, 0xaa, 0x4d, 0x5d, 0x58, 0x66, 0x73, 0x95, 0xbc, 0x81,
	0xfd, 0xfc, 0x00, 0xf8, 0xf4, 0x9c, 0x4e, 0xed, 0xd3, 0x68, 0x65, 0x32, 0x76, 0x6e, 0xad, 0x63,
	0xe1, 0x2d, 0x24, 0x94, 0x17, 0xc9, 0x25, 0x8d, 0x57, 0x9b, 0x4f, 0x3f, 0xab, 0x91, 0x72, 0x6b,
	0x42, 0x5e, 0x43, 0xdd, 0x43, 0x6e, 0x19, 0xd3, 0xbb, 0x70, 0xde, 0xc2, 0xc1, 0x2a, 0xa7, 0x83,
	0x8e, 0xeb, 0x4d, 0x4d, 0x9d, 0x4f, 0xe4, 0x26, 0xc5, 0xbd, 0x82, 0x07, 0x0b, 0xce, 0x7c, 0x3c,
	0xd6, 0xc1, 0x7c, 0x84, 0x78, 0xb5, 0x36, 0x26, 0x9c, 0x30, 0x79, 0x07, 0x9f, 0xdd, 0x8d, 0x18,
	0xfe, 0x9f, 0xd8, 0xda, 0x3a, 0xf1, 0xc5, 0x9a, 0xc4, 0xf7, 0x70, 0xb8, 0xdc, 0xa8, 0x1b, 0xd7,
	0xfc, 0x2f, 0x5e, 0x6b, 0xcb, 0xbc, 0x35, 0xeb, 0x7d, 0xfa, 0x18, 0x6a, 0x8b, 0x4b, 0x2a, 0xaa,
	0x42, 0xc9, 0xa0, 0x11, 0xfb, 0xf7, 0x2e, 0xf6, 0x7e, 0xcc, 0x1a, 0xc1, 0xcf, 0x59, 0x23, 0xf8,
	0x3d, 0x6b, 0x04, 0xdd, 0x0a, 0x5d, 0x68, 0xad, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x38,
	0x52, 0xee, 0x28, 0x07, 0x00, 0x00,
}
