// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game_interface.proto

/*
	Package protocol is a generated protocol buffer package.

	It is generated from these files:
		game_interface.proto
		game_model.proto
		gate_interface.proto
		gate_model.proto
		hall_interface.proto
		hall_model.proto
		passport_interface.proto
		passport_model.proto
		protocol.proto
		resultcode.proto
		room_interface.proto
		room_model.proto
		scene_interface.proto
		scene_model.proto

	It has these top-level messages:
		GetRoleInfo
		GetRoleInfoRet
		LoginRole
		LoginRoleRet
		ChangeNickname
		ChangeNicknameRet
		Role
		KickOut
		PushMessage
		BindService
		BindServiceRet
		HeartBeat
		QuickMatch
		QuickMatchRet
		UserRegister
		UserRegisterRet
		UserLogin
		UserLoginRet
		ChannelLogin
		ChannelLoginRet
		TokenLogin
		TokenLoginRet
		User
		Request
		Response
		ShowUser
		ShowUserRet
		RoomCreate
		RoomCreateRet
		RoomClose
		JoinRoom
		JoinRoomRet
		RequestJoinSeat
		JoinSeat
		ChangePlayerState
		ChangePlayerStateRet
		UpdateSeat
		GetRoomInfo
		GetRoomInfoRet
		GameReady
		GameStart
		GameOver
		CloseRoom
		GameData
		GameOverRet
		RoomClosePush
		GameStartPush
		GameStopPush
		RequestJoinSeatPush
		GameDataPush
		UpdateSeatPush
		PlayerResult
		Record
		JoinRequest
		Room
		Seat
		Player
		LoginScene
		MoveScene
		MigrateOut
		MigrateIn
		EntityCall
		ScenePush
		EntityPush
		Vector
		Entity
*/
package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 获取角色基本信息
type GetRoleInfo struct {
}

func (m *GetRoleInfo) Reset()                    { *m = GetRoleInfo{} }
func (m *GetRoleInfo) String() string            { return proto.CompactTextString(m) }
func (*GetRoleInfo) ProtoMessage()               {}
func (*GetRoleInfo) Descriptor() ([]byte, []int) { return fileDescriptorGameInterface, []int{0} }

type GetRoleInfoRet struct {
	Role []*Role `protobuf:"bytes,1,rep,name=role" json:"role,omitempty"`
}

func (m *GetRoleInfoRet) Reset()                    { *m = GetRoleInfoRet{} }
func (m *GetRoleInfoRet) String() string            { return proto.CompactTextString(m) }
func (*GetRoleInfoRet) ProtoMessage()               {}
func (*GetRoleInfoRet) Descriptor() ([]byte, []int) { return fileDescriptorGameInterface, []int{1} }

func (m *GetRoleInfoRet) GetRole() []*Role {
	if m != nil {
		return m.Role
	}
	return nil
}

// 登陆角色
type LoginRole struct {
	RoleId int64 `protobuf:"varint,1,opt,name=roleId,proto3" json:"roleId,omitempty"`
}

func (m *LoginRole) Reset()                    { *m = LoginRole{} }
func (m *LoginRole) String() string            { return proto.CompactTextString(m) }
func (*LoginRole) ProtoMessage()               {}
func (*LoginRole) Descriptor() ([]byte, []int) { return fileDescriptorGameInterface, []int{2} }

func (m *LoginRole) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

// 玩家角色游戏信息
type LoginRoleRet struct {
	Role *Role `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
}

func (m *LoginRoleRet) Reset()                    { *m = LoginRoleRet{} }
func (m *LoginRoleRet) String() string            { return proto.CompactTextString(m) }
func (*LoginRoleRet) ProtoMessage()               {}
func (*LoginRoleRet) Descriptor() ([]byte, []int) { return fileDescriptorGameInterface, []int{3} }

func (m *LoginRoleRet) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

// 修改昵称
type ChangeNickname struct {
	NewName string `protobuf:"bytes,1,opt,name=newName,proto3" json:"newName,omitempty"`
}

func (m *ChangeNickname) Reset()                    { *m = ChangeNickname{} }
func (m *ChangeNickname) String() string            { return proto.CompactTextString(m) }
func (*ChangeNickname) ProtoMessage()               {}
func (*ChangeNickname) Descriptor() ([]byte, []int) { return fileDescriptorGameInterface, []int{4} }

func (m *ChangeNickname) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

type ChangeNicknameRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ChangeNicknameRet) Reset()                    { *m = ChangeNicknameRet{} }
func (m *ChangeNicknameRet) String() string            { return proto.CompactTextString(m) }
func (*ChangeNicknameRet) ProtoMessage()               {}
func (*ChangeNicknameRet) Descriptor() ([]byte, []int) { return fileDescriptorGameInterface, []int{5} }

func (m *ChangeNicknameRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*GetRoleInfo)(nil), "protocol.getRoleInfo")
	proto.RegisterType((*GetRoleInfoRet)(nil), "protocol.getRoleInfoRet")
	proto.RegisterType((*LoginRole)(nil), "protocol.loginRole")
	proto.RegisterType((*LoginRoleRet)(nil), "protocol.loginRoleRet")
	proto.RegisterType((*ChangeNickname)(nil), "protocol.changeNickname")
	proto.RegisterType((*ChangeNicknameRet)(nil), "protocol.changeNicknameRet")
}
func (m *GetRoleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetRoleInfoRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoleInfoRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Role) > 0 {
		for _, msg := range m.Role {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGameInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LoginRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRole) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoleId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameInterface(dAtA, i, uint64(m.RoleId))
	}
	return i, nil
}

func (m *LoginRoleRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRoleRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Role != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameInterface(dAtA, i, uint64(m.Role.Size()))
		n1, err := m.Role.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ChangeNickname) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeNickname) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameInterface(dAtA, i, uint64(len(m.NewName)))
		i += copy(dAtA[i:], m.NewName)
	}
	return i, nil
}

func (m *ChangeNicknameRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeNicknameRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintGameInterface(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetRoleInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetRoleInfoRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Role) > 0 {
		for _, e := range m.Role {
			l = e.Size()
			n += 1 + l + sovGameInterface(uint64(l))
		}
	}
	return n
}

func (m *LoginRole) Size() (n int) {
	var l int
	_ = l
	if m.RoleId != 0 {
		n += 1 + sovGameInterface(uint64(m.RoleId))
	}
	return n
}

func (m *LoginRoleRet) Size() (n int) {
	var l int
	_ = l
	if m.Role != nil {
		l = m.Role.Size()
		n += 1 + l + sovGameInterface(uint64(l))
	}
	return n
}

func (m *ChangeNickname) Size() (n int) {
	var l int
	_ = l
	l = len(m.NewName)
	if l > 0 {
		n += 1 + l + sovGameInterface(uint64(l))
	}
	return n
}

func (m *ChangeNicknameRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func sovGameInterface(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGameInterface(x uint64) (n int) {
	return sovGameInterface(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetRoleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getRoleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getRoleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGameInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoleInfoRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getRoleInfoRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getRoleInfoRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = append(m.Role, &Role{})
			if err := m.Role[len(m.Role)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: loginRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: loginRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRoleRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: loginRoleRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: loginRoleRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Role == nil {
				m.Role = &Role{}
			}
			if err := m.Role.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeNickname) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: changeNickname: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: changeNickname: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeNicknameRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: changeNicknameRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: changeNicknameRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGameInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGameInterface(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGameInterface
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGameInterface
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGameInterface
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGameInterface(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGameInterface = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGameInterface   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game_interface.proto", fileDescriptorGameInterface) }

var fileDescriptorGameInterface = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x49, 0x4f, 0xcc, 0x4d,
	0x8d, 0xcf, 0xcc, 0x2b, 0x49, 0x2d, 0x4a, 0x4b, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x00, 0x53, 0xc9, 0xf9, 0x39, 0x52, 0x02, 0x60, 0xf9, 0xdc, 0xfc, 0x94, 0xd4, 0x1c,
	0x88, 0x9c, 0x12, 0x2f, 0x17, 0x77, 0x7a, 0x6a, 0x49, 0x50, 0x7e, 0x4e, 0xaa, 0x67, 0x5e, 0x5a,
	0xbe, 0x92, 0x09, 0x17, 0x1f, 0x12, 0x37, 0x28, 0xb5, 0x44, 0x48, 0x89, 0x8b, 0xa5, 0x28, 0x3f,
	0x27, 0x55, 0x82, 0x51, 0x81, 0x59, 0x83, 0xdb, 0x88, 0x4f, 0x0f, 0x66, 0x96, 0x1e, 0x48, 0x51,
	0x10, 0x58, 0x4e, 0x49, 0x99, 0x8b, 0x33, 0x27, 0x3f, 0x3d, 0x33, 0x0f, 0x24, 0x24, 0x24, 0xc6,
	0xc5, 0x06, 0x12, 0xf4, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x82, 0xf2, 0x94, 0x8c,
	0xb8, 0x78, 0xe0, 0x8a, 0x50, 0x0d, 0x66, 0xc4, 0x69, 0xb0, 0x16, 0x17, 0x5f, 0x72, 0x46, 0x62,
	0x5e, 0x7a, 0xaa, 0x5f, 0x66, 0x72, 0x76, 0x5e, 0x62, 0x6e, 0xaa, 0x90, 0x04, 0x17, 0x7b, 0x5e,
	0x6a, 0xb9, 0x5f, 0x62, 0x2e, 0x44, 0x23, 0x67, 0x10, 0x8c, 0xab, 0xa4, 0xcd, 0x25, 0x88, 0xaa,
	0x16, 0x64, 0x09, 0xc8, 0x31, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x60, 0xd5, 0x1c, 0x41, 0x50, 0x9e,
	0x13, 0xcf, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x98, 0xc4,
	0x06, 0xb6, 0xdb, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x13, 0xbc, 0xb6, 0x3f, 0x01, 0x00,
	0x00,
}
