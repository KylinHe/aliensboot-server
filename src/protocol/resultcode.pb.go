// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: resultcode.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Code int32

const (
	Code_Success           Code = 0
	Code_InvalidRequest    Code = 1
	Code_ServerException   Code = 2
	Code_DBExcetpion       Code = 3
	Code_ConfigException   Code = 4
	Code_InternalException Code = 5
	// game
	Code_ValidateException Code = 9
	// room
	Code_appIDNotFound        Code = 50
	Code_playerNotFound       Code = 51
	Code_invalidAuth          Code = 52
	Code_roomNotFound         Code = 60
	Code_roomMaxSeat          Code = 61
	Code_roomAlreadyExist     Code = 62
	Code_invalidSeat          Code = 63
	Code_playerAlreadySeat    Code = 64
	Code_gameNotFound         Code = 101
	Code_gameAlreadyStart     Code = 103
	Code_gameInvalidMsgFormat Code = 104
	// scene
	Code_entityNotFound    Code = 200
	Code_invalidEntityCall Code = 201
	Code_InvalidService    Code = 1000
)

var Code_name = map[int32]string{
	0:    "Success",
	1:    "InvalidRequest",
	2:    "ServerException",
	3:    "DBExcetpion",
	4:    "ConfigException",
	5:    "InternalException",
	9:    "ValidateException",
	50:   "appIDNotFound",
	51:   "playerNotFound",
	52:   "invalidAuth",
	60:   "roomNotFound",
	61:   "roomMaxSeat",
	62:   "roomAlreadyExist",
	63:   "invalidSeat",
	64:   "playerAlreadySeat",
	101:  "gameNotFound",
	103:  "gameAlreadyStart",
	104:  "gameInvalidMsgFormat",
	200:  "entityNotFound",
	201:  "invalidEntityCall",
	1000: "InvalidService",
}
var Code_value = map[string]int32{
	"Success":              0,
	"InvalidRequest":       1,
	"ServerException":      2,
	"DBExcetpion":          3,
	"ConfigException":      4,
	"InternalException":    5,
	"ValidateException":    9,
	"appIDNotFound":        50,
	"playerNotFound":       51,
	"invalidAuth":          52,
	"roomNotFound":         60,
	"roomMaxSeat":          61,
	"roomAlreadyExist":     62,
	"invalidSeat":          63,
	"playerAlreadySeat":    64,
	"gameNotFound":         101,
	"gameAlreadyStart":     103,
	"gameInvalidMsgFormat": 104,
	"entityNotFound":       200,
	"invalidEntityCall":    201,
	"InvalidService":       1000,
}

func (x Code) String() string {
	return proto.EnumName(Code_name, int32(x))
}
func (Code) EnumDescriptor() ([]byte, []int) { return fileDescriptorResultcode, []int{0} }

type CodeMessage struct {
	Code  Code     `protobuf:"varint,1,opt,name=code,proto3,enum=protocol.Code" json:"code,omitempty"`
	Param []string `protobuf:"bytes,2,rep,name=param" json:"param,omitempty"`
}

func (m *CodeMessage) Reset()                    { *m = CodeMessage{} }
func (m *CodeMessage) String() string            { return proto.CompactTextString(m) }
func (*CodeMessage) ProtoMessage()               {}
func (*CodeMessage) Descriptor() ([]byte, []int) { return fileDescriptorResultcode, []int{0} }

func (m *CodeMessage) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_Success
}

func (m *CodeMessage) GetParam() []string {
	if m != nil {
		return m.Param
	}
	return nil
}

func init() {
	proto.RegisterType((*CodeMessage)(nil), "protocol.CodeMessage")
	proto.RegisterEnum("protocol.Code", Code_name, Code_value)
}
func (m *CodeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodeMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintResultcode(dAtA, i, uint64(m.Code))
	}
	if len(m.Param) > 0 {
		for _, s := range m.Param {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintResultcode(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CodeMessage) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovResultcode(uint64(m.Code))
	}
	if len(m.Param) > 0 {
		for _, s := range m.Param {
			l = len(s)
			n += 1 + l + sovResultcode(uint64(l))
		}
	}
	return n
}

func sovResultcode(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozResultcode(x uint64) (n int) {
	return sovResultcode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CodeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResultcode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResultcode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResultcode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResultcode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = append(m.Param, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResultcode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResultcode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResultcode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResultcode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResultcode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResultcode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthResultcode
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowResultcode
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipResultcode(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthResultcode = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResultcode   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("resultcode.proto", fileDescriptorResultcode) }

var fileDescriptorResultcode = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xbb, 0xae, 0xda, 0x40,
	0x10, 0x86, 0xe3, 0x03, 0x27, 0x27, 0x67, 0x38, 0x31, 0xcb, 0x42, 0x22, 0x2a, 0x84, 0xa8, 0x50,
	0x0a, 0x0a, 0x48, 0x99, 0x1b, 0xd7, 0x88, 0x82, 0x14, 0x20, 0xa5, 0xdf, 0xd8, 0x13, 0x63, 0x69,
	0xed, 0x75, 0x76, 0xc7, 0x08, 0x1e, 0x2a, 0xef, 0x41, 0xba, 0x3c, 0x42, 0x44, 0x95, 0xc7, 0x88,
	0xc6, 0x80, 0x49, 0x65, 0xf9, 0xdb, 0x4f, 0xf3, 0x8f, 0xfe, 0x01, 0x61, 0xd1, 0xe5, 0x9a, 0x02,
	0x13, 0xe2, 0x20, 0xb3, 0x86, 0x8c, 0x7c, 0x51, 0x7c, 0x02, 0xa3, 0x7b, 0x9f, 0xa1, 0x36, 0x35,
	0x21, 0xae, 0xd0, 0x39, 0x15, 0xa1, 0xec, 0x41, 0x95, 0xb5, 0xb6, 0xd7, 0xf5, 0xfa, 0xfe, 0xd0,
	0x1f, 0x5c, 0xbd, 0x01, 0x4b, 0xeb, 0xe2, 0x4d, 0xb6, 0xe0, 0x3e, 0x53, 0x56, 0x25, 0xed, 0xbb,
	0x6e, 0xa5, 0xff, 0xb8, 0x3e, 0xff, 0xbc, 0xf9, 0x59, 0x81, 0x2a, 0x4b, 0xb2, 0x06, 0x0f, 0x9b,
	0x3c, 0x08, 0xd0, 0x39, 0xf1, 0x4c, 0x4a, 0xf0, 0x97, 0xe9, 0x4e, 0xe9, 0x38, 0x5c, 0xe3, 0x8f,
	0x1c, 0x1d, 0x09, 0x4f, 0x36, 0xa1, 0xbe, 0x41, 0xbb, 0x43, 0x3b, 0xdf, 0x07, 0x98, 0x51, 0x6c,
	0x52, 0x71, 0x27, 0xeb, 0x50, 0x9b, 0x4d, 0x18, 0x50, 0xc6, 0xa0, 0xc2, 0xd6, 0xd4, 0xa4, 0xdf,
	0xe3, 0xe8, 0x66, 0x55, 0xe5, 0x2b, 0x68, 0x2c, 0x53, 0x42, 0x9b, 0x2a, 0x7d, 0xc3, 0xf7, 0x8c,
	0xbf, 0x72, 0x86, 0x22, 0xbc, 0xe1, 0x47, 0xd9, 0x80, 0x97, 0x2a, 0xcb, 0x96, 0xb3, 0x2f, 0x86,
	0x16, 0x26, 0x4f, 0x43, 0x31, 0xe4, 0x7d, 0x32, 0xad, 0x0e, 0x68, 0x4b, 0x36, 0xe2, 0xe8, 0xf8,
	0xbc, 0xe3, 0x38, 0xa7, 0xad, 0x78, 0x2b, 0x05, 0x3c, 0x59, 0x63, 0x92, 0x52, 0x79, 0xc7, 0x0a,
	0x93, 0x95, 0xda, 0x6f, 0x50, 0x91, 0x78, 0x2f, 0x5b, 0x20, 0x18, 0x8c, 0xb5, 0x45, 0x15, 0x1e,
	0xe6, 0xfb, 0xd8, 0x91, 0xf8, 0xf0, 0xdf, 0xa4, 0x42, 0xfb, 0xc8, 0x8b, 0x9d, 0xe3, 0x2e, 0x62,
	0x81, 0x3f, 0x71, 0x40, 0xa4, 0x12, 0x2c, 0x03, 0xb8, 0x53, 0xc1, 0xe4, 0xaa, 0x91, 0xb2, 0x24,
	0x22, 0xd9, 0x86, 0x16, 0xd3, 0x4b, 0x83, 0x2b, 0x17, 0x2d, 0x8c, 0x4d, 0x14, 0x89, 0xad, 0x6c,
	0x82, 0x8f, 0x29, 0xc5, 0x74, 0x28, 0x67, 0x1c, 0x3d, 0xf9, 0x1a, 0x1a, 0x97, 0xf8, 0x79, 0xf1,
	0x36, 0x55, 0x5a, 0x8b, 0x5f, 0x5c, 0xf8, 0xf5, 0x08, 0xdc, 0x7b, 0x1c, 0xa0, 0xf8, 0xfb, 0x30,
	0x79, 0x3a, 0x9e, 0x3a, 0xde, 0xef, 0x53, 0xc7, 0xfb, 0x73, 0xea, 0x78, 0xdf, 0x9e, 0x17, 0x87,
	0x1e, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x81, 0xfd, 0x3f, 0xf6, 0x2b, 0x02, 0x00, 0x00,
}
