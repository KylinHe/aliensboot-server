// Code generated by aliensboot. DO NOT EDIT.
// source: module gate
package service

import (
    "github.com/KylinHe/aliensboot-server/module/gate/conf"
    "github.com/KylinHe/aliensboot-server/protocol"
    "github.com/KylinHe/aliensboot-core/chanrpc"
    "github.com/KylinHe/aliensboot-core/cluster/center"
    "github.com/KylinHe/aliensboot-core/cluster/center/service"
    "github.com/KylinHe/aliensboot-core/exception"
)

var instance service.IService = nil

var handlers = make(map[uint16]func(ctx *service.Context))

//register self handler
func RegisterHandler(msgID uint16, handler func(ctx *service.Context)) {
	handlers[msgID] = handler
}

func handleInternal(ctx *service.Context) bool {
	handler := handlers[ctx.GetMsgId()]
	if handler == nil {
		return false
	}
	handler(ctx)
	return true
}

func Init(chanRpc *chanrpc.Server) {
	instance = center.PublicService(conf.Config.Service, service.NewRpcHandler(chanRpc, handle, &protocol.MsgProcessor{}))
}

func Close() {
	center.ReleaseService(instance)
}

func handle(ctx *service.Context) {
    isResponse := false
    request := ctx.Request.(*protocol.Request)
    response := ctx.Response.(*protocol.Response)
    defer func() {
		//处理消息异常
		if err := recover(); err != nil {
			switch err.(type) {
			case protocol.Code:
				response.Code = err.(protocol.Code)
				break
			default:
				exception.PrintStackDetail(err)
				response.Code = protocol.Code_ServerException
			}
			isResponse = true
		}
		if isResponse {
            ctx.WriteResponse()
        }
	}()
    ok := handleInternal(ctx)
    if ok {
    	return
    }
	isResponse = handleRequest(ctx, request, response)
}

func handleRequest(ctx *service.Context, request *protocol.Request, response *protocol.Response) bool {
	
	if request.GetHealthCheck() != nil {
		messageRet := &protocol.HealthCheckRet{}
		handleHealthCheck(ctx, request.GetHealthCheck(), messageRet)
		response.Gate = &protocol.Response_HealthCheckRet{messageRet}
		return true
	}
	
	if request.GetBindService() != nil {
		messageRet := &protocol.BindServiceRet{}
		handleBindService(ctx, request.GetBindService(), messageRet)
		response.Gate = &protocol.Response_BindServiceRet{messageRet}
		return true
	}
	
	if request.GetGetAuthNode() != nil {
		messageRet := &protocol.GetAuthNodeRet{}
		handleGetAuthNode(ctx, request.GetGetAuthNode(), messageRet)
		response.Gate = &protocol.Response_GetAuthNodeRet{messageRet}
		return true
	}
	
	
    if request.GetKickOut() != nil {
    	handleKickOut(ctx, request.GetKickOut())
    	return false
    }
    
    if request.GetPushMessage() != nil {
    	handlePushMessage(ctx, request.GetPushMessage())
    	return false
    }
    
	response.Code = protocol.Code_InvalidRequest
	return true
}

