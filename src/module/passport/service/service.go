// Code generated by aliensboot. DO NOT EDIT.
// source: module passport
package service

import (
    "github.com/KylinHe/aliensboot-server/module/passport/conf"
    "github.com/KylinHe/aliensboot-server/protocol"
    "github.com/KylinHe/aliensboot-core/chanrpc"
    "github.com/KylinHe/aliensboot-core/cluster/center"
    "github.com/KylinHe/aliensboot-core/cluster/center/service"
    "github.com/KylinHe/aliensboot-core/exception"
    "github.com/gogo/protobuf/proto"
)

var instance service.IService = nil

func Init(chanRpc *chanrpc.Server) {
	instance = center.PublicService(conf.Config.Service, service.NewRpcHandler(nil, handle))
}

func Close() {
	center.ReleaseService(instance)
}

func handle(ctx *service.Context) {
	requestProxy := &protocol.Request{}
	responseProxy := &protocol.Response{}
	defer func() {
		//处理消息异常
		if err := recover(); err != nil {
			switch err.(type) {
			case protocol.Code:
				responseProxy.Code = err.(protocol.Code)
				break
			default:
				exception.PrintStackDetail(err)
				responseProxy.Code = protocol.Code_ServerException
			}
		}
		_ = ctx.GOGOProto(responseProxy)
	}()
	error := proto.Unmarshal(ctx.Request.Value, requestProxy)
	if error != nil {
		exception.GameException(protocol.Code_InvalidRequest)
	}
	responseProxy.Session = requestProxy.GetSession()
	handleRequest(ctx, requestProxy, responseProxy)
}

func handleRequest(ctx *service.Context, request *protocol.Request, response *protocol.Response) {
	
	if request.GetUserRegister() != nil {
		messageRet := &protocol.UserRegisterRet{}
		handleUserRegister(ctx, request.GetUserRegister(), messageRet)
		response.Passport = &protocol.Response_UserRegisterRet{messageRet}
		return
	}
	
	if request.GetUserLogin() != nil {
		messageRet := &protocol.UserLoginRet{}
		handleUserLogin(ctx, request.GetUserLogin(), messageRet)
		response.Passport = &protocol.Response_UserLoginRet{messageRet}
		return
	}
	
	if request.GetTokenLogin() != nil {
		messageRet := &protocol.TokenLoginRet{}
		handleTokenLogin(ctx, request.GetTokenLogin(), messageRet)
		response.Passport = &protocol.Response_TokenLoginRet{messageRet}
		return
	}
	
	if request.GetModifyUserStatus() != nil {
		messageRet := &protocol.ModifyUserStatusRet{}
		handleModifyUserStatus(ctx, request.GetModifyUserStatus(), messageRet)
		response.Passport = &protocol.Response_ModifyUserStatusRet{messageRet}
		return
	}
	
	if request.GetGetUser() != nil {
		messageRet := &protocol.GetUserRet{}
		handleGetUser(ctx, request.GetGetUser(), messageRet)
		response.Passport = &protocol.Response_GetUserRet{messageRet}
		return
	}
	
	if request.GetUserReset() != nil {
		messageRet := &protocol.UserResetRet{}
		handleUserReset(ctx, request.GetUserReset(), messageRet)
		response.Passport = &protocol.Response_UserResetRet{messageRet}
		return
	}
	
	response.Code = protocol.Code_InvalidRequest
}

