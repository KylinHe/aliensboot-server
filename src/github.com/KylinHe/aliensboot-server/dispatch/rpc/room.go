// Code generated by aliensboot. DO NOT EDIT.
// source: module room
package rpc

import (
	"github.com/KylinHe/aliensboot-server/protocol"
)

var Room = &roomRPCHandler{&rpcHandler{name:"room"}}


type roomRPCHandler struct {
	*rpcHandler
}


func (this *roomRPCHandler) ShowUser(node string, request *protocol.ShowUser) *protocol.ShowUserRet {
	message := &protocol.Request{
		Room:&protocol.Request_ShowUser{
			ShowUser:request,
		},
	}
	messageRet := this.Request(node, message)
	return messageRet.GetShowUserRet()
}

func (this *roomRPCHandler) GetRoomInfo(node string, request *protocol.GetRoomInfo) *protocol.GetRoomInfoRet {
	message := &protocol.Request{
		Room:&protocol.Request_GetRoomInfo{
			GetRoomInfo:request,
		},
	}
	messageRet := this.Request(node, message)
	return messageRet.GetGetRoomInfoRet()
}

func (this *roomRPCHandler) RoomCreate(node string, request *protocol.RoomCreate) *protocol.RoomCreateRet {
	message := &protocol.Request{
		Room:&protocol.Request_RoomCreate{
			RoomCreate:request,
		},
	}
	messageRet := this.Request(node, message)
	return messageRet.GetRoomCreateRet()
}

func (this *roomRPCHandler) JoinRoom(node string, request *protocol.JoinRoom) *protocol.JoinRoomRet {
	message := &protocol.Request{
		Room:&protocol.Request_JoinRoom{
			JoinRoom:request,
		},
	}
	messageRet := this.Request(node, message)
	return messageRet.GetJoinRoomRet()
}



func (this *roomRPCHandler) RoomClose(node string, request *protocol.RoomClose) error {
	message := &protocol.Request{
		Room:&protocol.Request_RoomClose{
			RoomClose:request,
		},
	}
	return this.Send(node, message)
}

func (this *roomRPCHandler) RequestJoinSeat(node string, request *protocol.RequestJoinSeat) error {
	message := &protocol.Request{
		Room:&protocol.Request_RequestJoinSeat{
			RequestJoinSeat:request,
		},
	}
	return this.Send(node, message)
}

func (this *roomRPCHandler) JoinSeat(node string, request *protocol.JoinSeat) error {
	message := &protocol.Request{
		Room:&protocol.Request_JoinSeat{
			JoinSeat:request,
		},
	}
	return this.Send(node, message)
}

func (this *roomRPCHandler) UpdateSeat(node string, request *protocol.UpdateSeat) error {
	message := &protocol.Request{
		Room:&protocol.Request_UpdateSeat{
			UpdateSeat:request,
		},
	}
	return this.Send(node, message)
}

func (this *roomRPCHandler) GameStart(node string, request *protocol.GameStart) error {
	message := &protocol.Request{
		Room:&protocol.Request_GameStart{
			GameStart:request,
		},
	}
	return this.Send(node, message)
}

func (this *roomRPCHandler) GameOver(node string, request *protocol.GameOver) error {
	message := &protocol.Request{
		Room:&protocol.Request_GameOver{
			GameOver:request,
		},
	}
	return this.Send(node, message)
}

func (this *roomRPCHandler) GameReady(node string, request *protocol.GameReady) error {
	message := &protocol.Request{
		Room:&protocol.Request_GameReady{
			GameReady:request,
		},
	}
	return this.Send(node, message)
}

func (this *roomRPCHandler) GameData(node string, request *protocol.GameData) error {
	message := &protocol.Request{
		Room:&protocol.Request_GameData{
			GameData:request,
		},
	}
	return this.Send(node, message)
}
