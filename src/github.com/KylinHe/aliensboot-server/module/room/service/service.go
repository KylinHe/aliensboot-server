// Code generated by aliensboot. DO NOT EDIT.
// source: module room
package service

import (
    "github.com/KylinHe/aliensboot-core/chanrpc"
    "github.com/KylinHe/aliensboot-core/cluster/center/service"
    "github.com/KylinHe/aliensboot-core/cluster/center"
    "github.com/KylinHe/aliensboot-core/exception"
    "github.com/KylinHe/aliensboot-core/protocol/base"
    "github.com/KylinHe/aliensboot-server/module/room/conf"
    "github.com/KylinHe/aliensboot-server/protocol"
    "github.com/gogo/protobuf/proto"
)

var instance service.IService = nil

var handlers = make(map[uint16]func(request *base.Any)*base.Any)

func Init(chanRpc *chanrpc.Server) {
	instance = center.PublicService(conf.Config.Service, service.NewRpcHandler(chanRpc, handle))
}

func Close() {
	center.ReleaseService(instance)
}


//register self handler
func RegisteHandler(msgID uint16, handler func(request *base.Any)*base.Any) {
	handlers[msgID] = handler
}

func handleInternal(request *base.Any) (bool, *base.Any) {
	handler := handlers[request.Id]
	if handler == nil {
		return false, nil
	}
	response := handler(request)
	return true, response
}

func handle(request *base.Any) (response *base.Any) {
    ok, response := handleInternal(request)
	if ok {
		return response
	}
	requestProxy := &protocol.Request{}
	responseProxy := &protocol.Response{}
	response = &base.Any{}
	isResponse := false
	defer func() {
		//处理消息异常
		if err := recover(); err != nil {
			switch err.(type) {
			case protocol.Code:
				responseProxy.Code = err.(protocol.Code)
				break
			default:
				exception.PrintStackDetail(err)
				responseProxy.Code = protocol.Code_ServerException
			}
			isResponse = true
		}
		if !isResponse {
            return
        }
		data, _ := proto.Marshal(responseProxy)
		responseProxy.Session = requestProxy.GetSession()
		response.Value = data
	}()
	error := proto.Unmarshal(request.Value, requestProxy)
	if error != nil {
		exception.GameException(protocol.Code_InvalidRequest)
	}
	isResponse = handleRequest(request.GetAuthId(), request.GetGateId(), requestProxy, responseProxy)
	return
}

func handleRequest(authID int64, gateID string, request *protocol.Request, response *protocol.Response) bool {
	
	if request.GetShowUser() != nil {
		messageRet := &protocol.ShowUserRet{}
		handleShowUser(authID, gateID, request.GetShowUser(), messageRet)
		response.Room = &protocol.Response_ShowUserRet{messageRet}
		return true
	}
	
	if request.GetGetRoomInfo() != nil {
		messageRet := &protocol.GetRoomInfoRet{}
		handleGetRoomInfo(authID, gateID, request.GetGetRoomInfo(), messageRet)
		response.Room = &protocol.Response_GetRoomInfoRet{messageRet}
		return true
	}
	
	if request.GetRoomCreate() != nil {
		messageRet := &protocol.RoomCreateRet{}
		handleRoomCreate(authID, gateID, request.GetRoomCreate(), messageRet)
		response.Room = &protocol.Response_RoomCreateRet{messageRet}
		return true
	}
	
	if request.GetJoinRoom() != nil {
		messageRet := &protocol.JoinRoomRet{}
		handleJoinRoom(authID, gateID, request.GetJoinRoom(), messageRet)
		response.Room = &protocol.Response_JoinRoomRet{messageRet}
		return true
	}
	
	
    if request.GetRoomClose() != nil {
    	handleRoomClose(authID, gateID, request.GetRoomClose())
    	return false
    }
    
    if request.GetRequestJoinSeat() != nil {
    	handleRequestJoinSeat(authID, gateID, request.GetRequestJoinSeat())
    	return false
    }
    
    if request.GetJoinSeat() != nil {
    	handleJoinSeat(authID, gateID, request.GetJoinSeat())
    	return false
    }
    
    if request.GetUpdateSeat() != nil {
    	handleUpdateSeat(authID, gateID, request.GetUpdateSeat())
    	return false
    }
    
    if request.GetGameStart() != nil {
    	handleGameStart(authID, gateID, request.GetGameStart())
    	return false
    }
    
    if request.GetGameOver() != nil {
    	handleGameOver(authID, gateID, request.GetGameOver())
    	return false
    }
    
    if request.GetGameReady() != nil {
    	handleGameReady(authID, gateID, request.GetGameReady())
    	return false
    }
    
    if request.GetGameData() != nil {
    	handleGameData(authID, gateID, request.GetGameData())
    	return false
    }
    
	response.Code = protocol.Code_InvalidRequest
	return true
}

