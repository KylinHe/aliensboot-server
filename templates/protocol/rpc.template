// Code generated by aliensboot. DO NOT EDIT.
// source: module ${module}
package rpc

import (
	"e.coding.net/aliens/slg_server/protocol"
)

var ${Module} = &${module}RPCHandler{&rpcHandler{name:"${module}"}}


type ${module}RPCHandler struct {
	*rpcHandler
}

<message>
func (this *${module}RPCHandler) ${o_request}(node string, request *${package}.${o_request_type}) *${package}.${o_response_type} {
	message := &${package}.Request{
		${Module}:&${package}.Request_${o_request}{
			${o_request}:request,
		},
	}
	messageRet := this.Request(node, message)
	return messageRet.Get${o_response}()
}


func (this *${module}RPCHandler) Test${o_request}(authId int64, node string, request *${package}.${o_request_type}) (*${package}.${o_response_type}, error) {
	message := &${package}.Request{
		${Module}:&${package}.Request_${o_request}{
			${o_request}:request,
		},
	}
	messageRet, err := this.TestRequest(authId, node, message)
	return messageRet.Get${o_response}(), err
}
<message>


<request>
func (this *${module}RPCHandler) ${o_request}(node string, request *${package}.${o_request}) error {
	message := &${package}.Request{
		${Module}:&${package}.Request_${o_request}{
			${o_request}:request,
		},
	}
	return this.Send(node, message)
}
<request>