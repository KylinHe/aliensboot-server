// Code generated by aliensboot. DO NOT EDIT.
// source: module ${module}
package service

import (
    "github.com/KylinHe/aliensboot-server/module/${module}/conf"
    "github.com/KylinHe/aliensboot-server/${package}"
    "github.com/KylinHe/aliensboot-core/chanrpc"
    "github.com/KylinHe/aliensboot-core/cluster/center"
    "github.com/KylinHe/aliensboot-core/cluster/center/service"
    "github.com/KylinHe/aliensboot-core/exception"
)

var instance service.IService = nil

var handlers = make(map[uint16]func(ctx *service.Context))

//register self handler
func RegisterHandler(msgID uint16, handler func(ctx *service.Context)) {
	handlers[msgID] = handler
}

func handleInternal(ctx *service.Context) bool {
	handler := handlers[ctx.GetMsgId()]
	if handler == nil {
		return false
	}
	handler(ctx)
	return true
}

func Init(chanRpc *chanrpc.Server) {
	instance = center.PublicService(conf.Config.Service, service.NewRpcHandler(nil, handle, &${package}.MsgProcessor{}))
}

func Close() {
	center.ReleaseService(instance)
}

func handle(ctx *service.Context) {
    isResponse := false
    request := ctx.Request.(*${package}.Request)
    response := ctx.Response.(*${package}.Response)
    defer func() {
		//处理消息异常
		if err := recover(); err != nil {
			switch err.(type) {
			case ${package}.Code:
				response.Code = err.(${package}.Code)
				break
			default:
				exception.PrintStackDetail(err)
				response.Code = ${package}.Code_ServerException
			}
			isResponse = true
		}
		if isResponse {
            ctx.WriteResponse()
        }
	}()
    ok := handleInternal(ctx)
    if ok {
    	return
    }
	isResponse = handleRequest(ctx, request, response)
}

func handleRequest(ctx *service.Context, request *${package}.Request, response *${package}.Response) bool {
	<message>
	if request.Get${o_request}() != nil {
		messageRet := &${package}.${o_response_type}{}
		handle${o_name}(ctx, request.Get${o_request}(), messageRet)
		response.${Module} = &${package}.Response_${o_response}{messageRet}
		return true
	}
	<message>
	<request>
    if request.Get${o_request}() != nil {
    	handle${o_name}(ctx, request.Get${o_request}())
    	return false
    }
    <request>
	response.Code = ${package}.Code_InvalidRequest
	return true
}

