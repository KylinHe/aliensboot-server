// Code generated by aliensboot. DO NOT EDIT.
// source: module ${module}
package service

import (

    "github.com/KylinHe/aliensboot-core/chanrpc"
    "github.com/KylinHe/aliensboot-core/cluster/center"
    "github.com/KylinHe/aliensboot-core/cluster/center/service"
    "github.com/KylinHe/aliensboot-core/exception"
    "github.com/KylinHe/aliensboot-core/log"
    "github.com/KylinHe/aliensboot-core/protocol/base"
    "github.com/KylinHe/aliensboot-server/module/${module}/conf"
    "github.com/KylinHe/aliensboot-server/${package}"
    "github.com/gogo/protobuf/proto"
)

var instance service.IService = nil

func Init(chanRpc *chanrpc.Server) {
	instance = center.PublicService(conf.Config.Service, service.NewRpcHandler(chanRpc, handle))
}

func Close() {
	center.ReleaseService(instance)
}

func handle(request *base.Any) (response *base.Any) {
	requestProxy := &${package}.Request{}
	responseProxy := &${package}.Response{}
	response = &base.Any{}
	authID := request.GetAuthId()
	defer func() {
		//处理消息异常
		if err := recover(); err != nil {
			switch err.(type) {
			case ${package}.Code:
				responseProxy.Code = err.(${package}.Code)
				break
			default:
				exception.PrintStackDetail(err)
				responseProxy.Code = ${package}.Code_ServerException
			}
		}
		data, _ := proto.Marshal(responseProxy)
		responseProxy.Session = requestProxy.GetSession()
        response.AuthId = authID
		response.Value = data
	}()
	error := proto.Unmarshal(request.Value, requestProxy)
	if error != nil {
	    log.Debug(error)
		exception.GameException(${package}.Code_InvalidRequest)
	}
	authID = handleRequest(requestProxy, responseProxy)
	return
}

func handleRequest(request *${package}.Request, response *${package}.Response) int64 {
	<message>
	if request.Get${o_request}() != nil {
		messageRet := &${package}.${o_response}{}
		result := handle${o_name}(request.Get${o_request}(), messageRet)
		response.${Module} = &${package}.Response_${o_response}{messageRet}
		return result
	}
	<message>
	response.Code = ${package}.Code_InvalidRequest
	return 0
}

