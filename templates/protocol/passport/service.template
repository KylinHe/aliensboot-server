// Code generated by aliensboot. DO NOT EDIT.
// source: module ${module}
package service

import (
    "e.coding.net/aliens/slg_server/module/${module}/conf"
    "e.coding.net/aliens/slg_server/${package}"
    "github.com/KylinHe/aliensboot-core/chanrpc"
    "github.com/KylinHe/aliensboot-core/cluster/center"
    "github.com/KylinHe/aliensboot-core/cluster/center/service"
    "github.com/KylinHe/aliensboot-core/exception"
    "github.com/gogo/protobuf/proto"
)

var instance service.IService = nil

func Init(chanRpc *chanrpc.Server) {
	instance = center.PublicService(conf.Config.Service, service.NewRpcHandler(nil, handle))
}

func Close() {
	center.ReleaseService(instance)
}

func handle(ctx *service.Context) {
	requestProxy := &${package}.Request{}
	responseProxy := &${package}.Response{}
	defer func() {
		//处理消息异常
		if err := recover(); err != nil {
			switch err.(type) {
			case ${package}.Code:
				responseProxy.Code = err.(${package}.Code)
				break
			default:
				exception.PrintStackDetail(err)
				responseProxy.Code = ${package}.Code_ServerException
			}
		}
		_ = ctx.GOGOProto(responseProxy)
	}()
	error := proto.Unmarshal(ctx.Request.Value, requestProxy)
	if error != nil {
		exception.GameException(${package}.Code_InvalidRequest)
	}
	responseProxy.Session = requestProxy.GetSession()
	handleRequest(ctx, requestProxy, responseProxy)
}

func handleRequest(ctx *service.Context, request *${package}.Request, response *${package}.Response) {
	<message>
	if request.Get${o_request}() != nil {
		messageRet := &${package}.${o_response_type}{}
		handle${o_name}(ctx, request.Get${o_request}(), messageRet)
		response.${Module} = &${package}.Response_${o_response}{messageRet}
		return
	}
	<message>
	response.Code = ${package}.Code_InvalidRequest
}

