// Code generated by aliensbot. DO NOT EDIT.
// source: module ${module}
package service

import (

    "github.com/KylinHe/aliensboot-core/chanrpc"
    "github.com/KylinHe/aliensboot-core/cluster/center"
    "github.com/KylinHe/aliensboot-core/cluster/center/service"
    "github.com/KylinHe/aliensboot-core/exception"
    "github.com/KylinHe/aliensboot-core/log"
    "github.com/KylinHe/aliensboot-core/protocol/base"
    "github.com/KylinHe/aliensboot-server/module/${module}/conf"
    "github.com/KylinHe/aliensboot-server/${package}"
    "github.com/gogo/protobuf/proto"

)

var instance service.IService = nil

func Init(chanRpc *chanrpc.Server) {
	instance = center.PublicService(conf.Config.Service, service.NewRpcHandler(chanRpc, handle))
}

func Close() {
	center.ReleaseService(instance)
}


func handle(request *base.Any) *base.Any {
     requestProxy := &${package}.Request{}
     defer func() {
         exception.CatchStackDetail()
     }()
     error := proto.Unmarshal(request.Value, requestProxy)
     if error != nil {
         log.Debugf("un expect request data : %v", request)
         return nil
     }
     handleRequest(requestProxy)
	 return nil
}

func handleRequest(request *${package}.Request) {
	<message>
	if request.Get${o_request}() != nil {
		handle${o_name}(request.Get${o_request}())
		return
	}
	<message>
	<request>
     if request.Get${o_request}() != nil {
        handle${o_name}(request.Get${o_request}())
      	return
     }
    <request>
	exception.GameException(protocol.Code_InvalidRequest)
}

